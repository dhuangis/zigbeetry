--- MT_UART.c	2017-08-04 12:06:05.078929413 +0800
+++ ../comperation/MT_UART.c	2017-08-04 12:03:26.849745286 +0800
@@ -21,7 +21,7 @@
   its documentation for any purpose.
 
   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
-  PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
+  PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
@@ -46,7 +46,7 @@
 #include "MT.h"
 #include "MT_UART.h"
 #include "OSAL_Memory.h"
-
+void UartProcessData ( uint8 port, uint8 event );
 
 /***************************************************************************************************
  * MACROS
@@ -177,6 +177,73 @@
 }
 
 
+
+void UartProcessData ( uint8 port, uint8 event )  
+{  
+  uint8  ch;  
+  uint8  bytesInRxBuffer;  
+  static uint8 state2=0;  
+    
+  (void)event;  // Intentionally unreferenced parameter  
+  while (bytesInRxBuffer=Hal_UART_RxBufLen(port))  
+  {  
+    switch (state2)  
+    {  
+  
+      case 0:  
+        LEN_Token = bytesInRxBuffer;  
+  
+        tempDataLen = 0;  
+  
+        /* Allocate memory for the data */  
+        pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof ( mtOSALSerialData_t )+ LEN_Token+1);  
+  
+        if (pMsg)  
+        {  
+          /* Fill up what we can */  
+          pMsg->hdr.event = CMD_SERIAL_MSG;  
+          pMsg->msg = (uint8*)(pMsg+1);  
+          state2 = 1;
+          pMsg->msg[tempDataLen++] = LEN_Token;
+        }  
+        else  
+        {  
+          state2 = 0;  
+          return;  
+        }  
+        break;  
+  
+      case 1:  
+        HalUARTRead (port, &ch, 1);  
+        /* Fill in the buffer the first byte of the data */  
+        pMsg->msg[tempDataLen++] = ch;  
+  
+        /* Check number of bytes left in the Rx buffer */  
+        bytesInRxBuffer = Hal_UART_RxBufLen(port);  
+  
+        /* If the remain of the data is there, read them all, otherwise, just read enough */  
+        if (bytesInRxBuffer <= LEN_Token - tempDataLen)  
+        {  
+          HalUARTRead (port, &pMsg->msg[tempDataLen], bytesInRxBuffer);  
+          tempDataLen += bytesInRxBuffer;  
+        }  
+        else  
+        {  
+          HalUARTRead (port, &pMsg->msg[tempDataLen], LEN_Token - tempDataLen);  
+          tempDataLen += (LEN_Token - tempDataLen);  
+        } 
+        osal_msg_send( App_TaskID, (byte *)pMsg );  
+        /* Reset the state, send or discard the buffers at this point */  
+        state2 = 0;  
+        osal_msg_deallocate ( (uint8 *)pMsg ); 
+        break;  
+  
+      default:  
+       break;  
+    }  
+  }  
+} 
+
 /***************************************************************************************************
  * @fn      MT_UartProcessZToolData
  *
@@ -194,116 +261,35 @@
  ***************************************************************************************************/
 void MT_UartProcessZToolData ( uint8 port, uint8 event )
 {
-  uint8  ch;
-  uint8  bytesInRxBuffer;
-  
-  (void)event;  // Intentionally unreferenced parameter
-
-  while (Hal_UART_RxBufLen(port))
-  {
-    HalUARTRead (port, &ch, 1);
-
-    switch (state)
-    {
-      case SOP_STATE:
-        if (ch == MT_UART_SOF)
-          state = LEN_STATE;
-        break;
-
-      case LEN_STATE:
-        LEN_Token = ch;
-
-        tempDataLen = 0;
-
-        /* Allocate memory for the data */
-        pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof ( mtOSALSerialData_t ) +
-                                                        MT_RPC_FRAME_HDR_SZ + LEN_Token );
-
-        if (pMsg)
-        {
-          /* Fill up what we can */
-          pMsg->hdr.event = CMD_SERIAL_MSG;
-          pMsg->msg = (uint8*)(pMsg+1);
-          pMsg->msg[MT_RPC_POS_LEN] = LEN_Token;
-          state = CMD_STATE1;
-        }
-        else
-        {
-          state = SOP_STATE;
-          return;
-        }
-        break;
-
-      case CMD_STATE1:
-        pMsg->msg[MT_RPC_POS_CMD0] = ch;
-        state = CMD_STATE2;
-        break;
-
-      case CMD_STATE2:
-        pMsg->msg[MT_RPC_POS_CMD1] = ch;
-        /* If there is no data, skip to FCS state */
-        if (LEN_Token)
-        {
-          state = DATA_STATE;
-        }
-        else
-        {
-          state = FCS_STATE;
-        }
-        break;
-
-      case DATA_STATE:
-
-        /* Fill in the buffer the first byte of the data */
-        pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen++] = ch;
-
-        /* Check number of bytes left in the Rx buffer */
-        bytesInRxBuffer = Hal_UART_RxBufLen(port);
-
-        /* If the remain of the data is there, read them all, otherwise, just read enough */
-        if (bytesInRxBuffer <= LEN_Token - tempDataLen)
-        {
-          HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], bytesInRxBuffer);
-          tempDataLen += bytesInRxBuffer;
-        }
-        else
-        {
-          HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], LEN_Token - tempDataLen);
-          tempDataLen += (LEN_Token - tempDataLen);
-        }
-
-        /* If number of bytes read is equal to data length, time to move on to FCS */
-        if ( tempDataLen == LEN_Token )
-            state = FCS_STATE;
-
-        break;
+   uint8 flag=0,i,j=0;   //flagÊÇÅÐ¶ÏÓÐÃ»ÓÐÊÕµ½Êý¾Ý£¬j¼ÇÂ¼Êý¾Ý³¤¶È
+  uint8 buf[128];     //´®¿Úbuffer×î´ó»º³åÄ¬ÈÏÊÇ128£¬ÎÒÃÇÕâÀïÓÃ128.
+  (void)event;        // Intentionally unreferenced parameter  
 
-      case FCS_STATE:
+  while (Hal_UART_RxBufLen(port)) //¼ì²â´®¿ÚÊý¾ÝÊÇ·ñ½ÓÊÕÍê³É
 
-        FSC_Token = ch;
-
-        /* Make sure it's correct */
-        if ((MT_UartCalcFCS ((uint8*)&pMsg->msg[0], MT_RPC_FRAME_HDR_SZ + LEN_Token) == FSC_Token))
-        {
-          osal_msg_send( App_TaskID, (byte *)pMsg );
-        }
-        else
-        {
-          /* deallocate the msg */
-          osal_msg_deallocate ( (uint8 *)pMsg );
-        }
-
-        /* Reset the state, send or discard the buffers at this point */
-        state = SOP_STATE;
-
-        break;
-
-      default:
-       break;
-    }
-  }
+  {
+    HalUARTRead (port,&buf[j], 1);  //°ÑÊý¾Ý½ÓÊÕ·Åµ½bufÖÐ
+    j++;                           //¼ÇÂ¼×Ö·ûÊý
+    flag=1;                         //ÒÑ¾­´Ó´®¿Ú½ÓÊÕµ½ÐÅÏ¢
+  } 
+
+  if(flag==1)       //ÒÑ¾­´Ó´®¿Ú½ÓÊÕµ½ÐÅÏ¢
+
+  {     /* Allocate memory for the data */
+	    //·ÖÅäÄÚ´æ¿Õ¼ä£¬Îª»ú¹¹ÌåÄÚÈÝ+Êý¾ÝÄÚÈÝ+1¸ö¼ÇÂ¼³¤¶ÈµÄÊý¾Ý
+   pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof  
+          ( mtOSALSerialData_t )+j+1);
+  //ÊÂ¼þºÅÓÃÔ­À´µÄCMD_SERIAL_MSG
+  pMsg->hdr.event = CMD_SERIAL_MSG;
+  pMsg->msg = (uint8*)(pMsg+1);  // °ÑÊý¾Ý¶¨Î»µ½½á¹¹ÌåÊý¾Ý²¿·Ö
+  pMsg->msg [0]= j;              //¸øÉÏ²ãµÄÊý¾ÝµÚÒ»¸öÊÇ³¤¶È
+  for(i=0;i<j;i++)                //´ÓµÚ¶þ¸ö¿ªÊ¼¼ÇÂ¼Êý¾Ý 
+  pMsg->msg [i+1]= buf[i];   
+  osal_msg_send( App_TaskID, (byte *)pMsg );  //µÇ¼ÇÈÎÎñ£¬·¢ÍùÉÏ²ã
+  /* deallocate the msg */
+  osal_msg_deallocate ( (uint8 *)pMsg );      //ÊÍ·ÅÄÚ´æ
+}
 }
-
 #if defined (ZAPP_P1) || defined (ZAPP_P2)
 /***************************************************************************************************
  * @fn      MT_UartProcessZAppData
@@ -428,3 +414,4 @@
 
 /***************************************************************************************************
 ***************************************************************************************************/
+ 
\ No newline at end of file
